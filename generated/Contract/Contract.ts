// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class feePaid extends ethereum.Event {
  get params(): feePaid__Params {
    return new feePaid__Params(this);
  }
}

export class feePaid__Params {
  _event: feePaid;

  constructor(event: feePaid) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ownedFallback extends ethereum.Event {
  get params(): ownedFallback__Params {
    return new ownedFallback__Params(this);
  }
}

export class ownedFallback__Params {
  _event: ownedFallback;

  constructor(event: ownedFallback) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ownedPaymentReceived extends ethereum.Event {
  get params(): ownedPaymentReceived__Params {
    return new ownedPaymentReceived__Params(this);
  }
}

export class ownedPaymentReceived__Params {
  _event: ownedPaymentReceived;

  constructor(event: ownedPaymentReceived) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class votingCreated extends ethereum.Event {
  get params(): votingCreated__Params {
    return new votingCreated__Params(this);
  }
}

export class votingCreated__Params {
  _event: votingCreated;

  constructor(event: votingCreated) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signatory(): Address {
    let result = super.call("signatory", "signatory():(address)", []);

    return result[0].toAddress();
  }

  try_signatory(): ethereum.CallResult<Address> {
    let result = super.tryCall("signatory", "signatory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  identifier(): string {
    let result = super.call("identifier", "identifier():(string)", []);

    return result[0].toString();
  }

  try_identifier(): ethereum.CallResult<string> {
    let result = super.tryCall("identifier", "identifier():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  registrations(s: string): Address {
    let result = super.call(
      "registrations",
      "registrations(string):(address)",
      [ethereum.Value.fromString(s)]
    );

    return result[0].toAddress();
  }

  try_registrations(s: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registrations",
      "registrations(string):(address)",
      [ethereum.Value.fromString(s)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shareholders(a: Address): string {
    let result = super.call("shareholders", "shareholders(address):(string)", [
      ethereum.Value.fromAddress(a)
    ]);

    return result[0].toString();
  }

  try_shareholders(a: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "shareholders",
      "shareholders(address):(string)",
      [ethereum.Value.fromAddress(a)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  secrets(i: BigInt): string {
    let result = super.call("secrets", "secrets(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);

    return result[0].toString();
  }

  try_secrets(i: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("secrets", "secrets(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  votings(i: BigInt): Address {
    let result = super.call("votings", "votings(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);

    return result[0].toAddress();
  }

  try_votings(i: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("votings", "votings(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numSecrets(): BigInt {
    let result = super.call("numSecrets", "numSecrets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numSecrets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numSecrets", "numSecrets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numVotings(): BigInt {
    let result = super.call("numVotings", "numVotings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numVotings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numVotings", "numVotings():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shares(): Address {
    let result = super.call("shares", "shares():(address)", []);

    return result[0].toAddress();
  }

  try_shares(): ethereum.CallResult<Address> {
    let result = super.tryCall("shares", "shares():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _identifier(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _signatory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get secret(): string {
    return this._call.inputValues[0].value.toString();
  }

  get v(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class SetShareholderCall extends ethereum.Call {
  get inputs(): SetShareholderCall__Inputs {
    return new SetShareholderCall__Inputs(this);
  }

  get outputs(): SetShareholderCall__Outputs {
    return new SetShareholderCall__Outputs(this);
  }
}

export class SetShareholderCall__Inputs {
  _call: SetShareholderCall;

  constructor(call: SetShareholderCall) {
    this._call = call;
  }

  get _shareholder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _shares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SetShareholderCall__Outputs {
  _call: SetShareholderCall;

  constructor(call: SetShareholderCall) {
    this._call = call;
  }
}

export class SetShareholdersCall extends ethereum.Call {
  get inputs(): SetShareholdersCall__Inputs {
    return new SetShareholdersCall__Inputs(this);
  }

  get outputs(): SetShareholdersCall__Outputs {
    return new SetShareholdersCall__Outputs(this);
  }
}

export class SetShareholdersCall__Inputs {
  _call: SetShareholdersCall;

  constructor(call: SetShareholdersCall) {
    this._call = call;
  }

  get _shareholders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _shares(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SetShareholdersCall__Outputs {
  _call: SetShareholdersCall;

  constructor(call: SetShareholdersCall) {
    this._call = call;
  }
}

export class NewVotingCall extends ethereum.Call {
  get inputs(): NewVotingCall__Inputs {
    return new NewVotingCall__Inputs(this);
  }

  get outputs(): NewVotingCall__Outputs {
    return new NewVotingCall__Outputs(this);
  }
}

export class NewVotingCall__Inputs {
  _call: NewVotingCall;

  constructor(call: NewVotingCall) {
    this._call = call;
  }

  get title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get proposal(): string {
    return this._call.inputValues[1].value.toString();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class NewVotingCall__Outputs {
  _call: NewVotingCall;

  constructor(call: NewVotingCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get v(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}
